ANR(应用程序无响应)
 1、原因：
  1）Activity操作5s内没有响应
  2）广播接收器onReceive方法执行时间超过10s
 2、解决方法：
  将耗时代码在工作线程中执行。主线程只负责
  界面操作和逻辑控制
  
单线程模型
 只能在UI线程（主线程）中更新UI
线程通信
 1、线程中可以创建消息队列和与之关联的looper对象
    普通的工作线程默认不包含消息队列
    主线程默认就包含一个消息队列
 2、Handler既是消息的发送者也是消息的处理者
 3、Handler在创建时必须被指定关联到一个线程的消息队列(Looper)
    如果没有明确指定，默认关联到其创建时所在线程的消息队列
    如果该线程中不存在消息队列，则创建handler失败
 4、消息处理：
  1）当Looper将消息对象从消息队列中轮询出来后，首先会判断该消息
     中是否包含runnable对象，如果包含，则直接在Looper所在的线程
     中执行该runnable对象的run方法
  2）如果消息对象中不包含runnable对象，则looper调用该消息的getTarget方法
     来获取指向消息发送者的引用。
  3）首先判断该发行者内是否包含callback对象，如果包含则调用callback对象的
     handleMessage方法进行消息处理，如果该方法返回true则消息处理完成，返回false
     则需要将消息传递给handler的handleMessage方法继续处理
  4）如果handler对象中不包含callback，则直接调用handler对象的handleMessage
     方法处理消息

 Message
  构造方法：Message（）
  实例化：
   static Message obtain()
   static Message obtain(Message msg)
   static Message obtain(Handler target)
   static Message obtain(Handler target,Runnable callback)
   static Message obtain(Handler target,int what)
   static Message obtain(Handler target,int what,Object obj)
   static Message obtain(Handler target,int what,int arg1,int arg2)
   static Message obtain(Handler target,int what,int arg1,int arg2,Object obj)
  主要属性：
   公共属性：
    int what
    int arg1
    int arg2
    Object obj
   私有属性
    Handler target
    Runnable callback
  主要方法：
   void setData(Bundle data)
   Bundle getData()
   void setTarget(Handler target)
   Handler getTarget()
   Runnable getCallback()
   sendToTarget()

 Handler
  构造方法：
   Handler()
   Handler(Looper looper)
   Handler(Callback callback)
   Handler(Looper looper,Callback callback)
  主要属性：
   Looper looper
   Callback callback
  主要方法：
   Looper getLooper()
   boolean sendMessage(Message msg)
   boolean sendMessageAtFrontOfQueue(Message msg)
   boolean sendMessageAtTime(Message msg,long uptimeMills)
   boolean sendMessageDelayed(Message msg,long uptimeMills)
   boolean sendEmptyMessage(int what)
   boolean sendEmptyMessageAtTime(int what,long uptimeMills)
   boolean sendEmptyMessageDelayed(int what,long uptimeMills)
   boolean post(Runnable callback)
   boolean postAtFrontOfQueue(Runnable callback)
   boolean postAtTime(Runnable callback,long uptimeMills)
   boolean postDelayed(Runnable callback,long uptimeMills)

